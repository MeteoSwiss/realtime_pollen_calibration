# Default configuration used by CI/CD.
# You can run locally 'mchbuild build' to create the images,
# 'mchbuild test' to run the tests using the images. The 'deploy' steps
# can be run separately.
default:
  - build:
      - getVersion:
          gitCalculateVersion:
      - imageTester:
          containerBuildImage:
            fullImageName: ${var.image}-tester
            target: tester
            extraArgs:
              - --build-arg
              - VERSION=${var.version}
      - imageRunner:
          containerBuildImage:
            fullImageName: ${var.image}
            target: runner
            extraArgs:
              - --build-arg
              - VERSION=${var.version}
            pullAlways: false
      - docs:
          - script: mkdir -p doc/_build
          - pythonDocs:
              fullImageName: ${var.image}-tester
              packageManager: ''
              pullAlways: false
  - test:
      - getVersion:
          gitCalculateVersion:
      - unit:
          - script: mkdir -p test_reports
          - pythonTest:
              fullImageName: ${var.image}-tester
              packageManager: ''
              pullAlways: false
          - pythonCoverage:
              fullImageName: ${var.image}-tester
              packageManager: ''
              pullAlways: false
      - lint:
          - script: mkdir -p test_reports
          - pythonLint:
              fullImageName: ${var.image}-tester
              packageManager: ''
              pullAlways: false
          - pythonTypeChecker:
              fullImageName: ${var.image}-tester
              packageManager: ''
              pullAlways: false
  - verify:
      - imageSecurityScan:
          - securityReport:
              format: [ 'html', 'sbom', 'table', 'print']
              severity: [ 'CRITICAL', 'HIGH' ]
              removeLocalImage: false
              pullAlways: false
              qualityGate:
                threshold: 20
                criticalFactor: 5
                highFactor: 1
      - publishSbom:
          - securityPublishSbom:
  - deploy:
      - addNextTag:
          gitAddNextTag:
      - addTag:
          gitAddTag:
      - docs:
          openshiftPublishDocs:
            docSrc: doc/_build/
            docType: python
      - image:
          containerPublishImage:
            removeLocalImage: false
      - cpDelete:
          openshiftDelete:
      - cp:
          openshiftDeploy:
            restartDeployment: false
  - clean:
      - getVersion:
          gitCalculateVersion:
      - images:
          script: |
            if test -n "${var.version}"; then
              podman image rm -f $(podman image ls -q \
                -f "label=ch.meteoswiss.project=${var.project}-${var.version}") || :
            fi

# Alternative configuration to install and test the service locally using
# the local Python installation. Besides 'mchbuild local.build' and
# 'mchbuild local.test' it is possible to run the job using
# 'mchbuild local.run'.
local:
  - build:
      - install:
          pythonInstall:
      - docs:
          pythonDocs:
      - format:
          pythonFormat:
            inPlace: true
  - test:
      - unit:
          - script: mkdir -p test_reports
          - pythonTest:
          - pythonCoverage:
      - lint:
          - script: mkdir -p test_reports
          - pythonLint:
          - pythonTypeChecker:
  - run:
      - main:
          - pythonRun:
              commands: realtime-pollen-calibration update_phenology --help

# Configuration to install and test the python project
# on top of a conda environment using micromamba to set it up
conda:
  - build:
      - getVersion:
          gitCalculateVersion:
      - install:
          pythonRun:
            packageManager: micromamba
            commands: |
              micromamba create -y -n ${var.project}-${var.version} --file conda_deps.yml --rc-file .mambarc && 
              micromamba run -n ${var.project}-${var.version} poetry install &&
              echo "Activate your environment with 'micromamba activate ${var.project}-${var.version}'"
  - test:
      - getVersion:
          gitCalculateVersion:
      - unit:
          pythonRun:
            packageManager: micromamba
            commands: |
              micromamba run -n ${var.project}-${var.version} bash -c "mchbuild local.test.unit"
      - lint:
          pythonRun:
            packageManager: micromamba
            commands: |
              micromamba run -n ${var.project}-${var.version} bash -c "mchbuild local.test.lint"
  - run:
      - getVersion:
          gitCalculateVersion:
      - main:
          - pythonRun:
              packageManager: micromamba
              commands: |
                micromamba run -n ${var.project}-${var.version} bash -c "mchbuild local.run.main"
  - clean:
      - getVersion:
          gitCalculateVersion:
      - deleteCondaEnv:
          pythonRun:
            packageManager: micromamba
            commands: |
              micromamba env remove -y -n ${var.project}-${var.version}

variables:
  project: realtime-pollen-calibration
  solution: icon
